name: biblioflow

services:
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 3s
      retries: 20
    networks:
      - backend

  mongodb:
    image: mongo:7
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_DB: ${MONGO_DB}
    volumes:
      - mongodata:/data/db
      - ./mongodb/init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "--eval", "db.runCommand({ ping: 1 }).ok"]
      interval: 5s
      timeout: 5s
      retries: 20
    networks:
      - backend

  api:
    build:
      context: ../biblioflow/biblioflow-backend
      dockerfile: Dockerfile
    environment:
      PORT: ${BACKEND_PORT}
      JWT_SECRET: ${JWT_SECRET}
      DATABASE_URL: ${DATABASE_URL}
      MONGODB_URL: ${MONGODB_URL}
      CORS_ORIGIN: ${CORS_ORIGIN}
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    expose:
      - "${BACKEND_PORT}"
    networks:
      - backend
    # Resource limits pour Ã©viter la monopolisation
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    # Restart policy
    restart: unless-stopped
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    # Labels pour monitoring
    labels:
      - "app=biblioflow"
      - "service=api"
      - "environment=production"

  frontend:
    build:
      context: ../biblioflow/biblioflow-frontend
      dockerfile: Dockerfile
    expose:
      - "80"
    networks:
      - frontend
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    restart: unless-stopped
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    # Labels pour monitoring
    labels:
      - "app=biblioflow"
      - "service=frontend"
      - "environment=production"

  nginx:
    image: nginx:alpine
    depends_on:
      api:
        condition: service_started
      frontend:
        condition: service_started
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - frontend
      - backend
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
        reservations:
          memory: 64M
          cpus: '0.1'
    restart: unless-stopped
    # Healthcheck pour nginx
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/healthz", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    # Labels pour monitoring
    labels:
      - "app=biblioflow"
      - "service=nginx"
      - "environment=production"

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge

volumes:
  pgdata:
  mongodata:
